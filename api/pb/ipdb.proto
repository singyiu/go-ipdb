syntax = "proto3";
package ipdb.pb;

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

message Result {
    int32 code = 2;
    string str = 3;
}

message Identity {
    bytes signature = 1;
}

message SchemaDetail {
    bytes sId = 1;
    string type = 2;
    bytes data = 3;
    bytes metaData = 4;
    bytes createdBy = 5;
    google.protobuf.Timestamp updatedAt = 6;
}

message RegisterSchemaRequest {
    Identity requester = 1;
    SchemaDetail schemaDetail = 2;
}

message RegisterSchemaReply {
    Result result = 1;
    SchemaDetail schemaDetail = 2;
}

message GetSchemaDetailRequest {
    Identity requester = 1;
    bytes sId = 2;
}

message GetSchemaDetailReply {
    Result result = 1;
    SchemaDetail schemaDetail = 2;
}

message DataRecord {
    bytes sId = 1;
    bytes payload = 2;
    //Identity publishedBy = 3;
    //google.protobuf.Timestamp updatedAt = 4;
}

message PublishRequest {
    Identity requester = 1;
    bytes sId = 2;
    bytes payload = 3;
}

message PublishReply {
    Result result = 1;
}

message SubscribeRequest {
    Identity requester = 1;
    bytes sId = 2;
}

message DataRecordReply {
    Result result = 1;
    DataRecord dataRecord = 2;
}

message QueryDetail {
    bytes sId = 1;
    google.protobuf.Struct queryStruct = 2;
}

message QueryRequest {
    Identity requester = 1;
    QueryDetail queryDetail = 2;
}

message QueryReply {
    Result result = 1;
    repeated DataRecord dataRecords = 2;
}

service API {
    rpc RegisterSchema(RegisterSchemaRequest) returns (RegisterSchemaReply) {}
    rpc GetSchemaDetail(GetSchemaDetailRequest) returns (GetSchemaDetailReply) {}
    rpc Publish(PublishRequest) returns (PublishReply) {}
    rpc Subscribe(SubscribeRequest) returns (stream DataRecordReply) {}
    rpc Query(QueryRequest) returns (QueryReply) {}
}
